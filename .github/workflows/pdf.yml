# Sphinxを用いたドキュメントのビルド(PDF)

# 発火対象は以下とする
# - 手動(latestとして公開)
# - mainブランチへのpushもしくはpull_request
#   - リリース名 latest として公開する
# - "vX.X.X"のタグがpushされたとき
#   - リリース名をタブ名として公開する

# ただし、手動での発火は、workflow_dispatchを指定する必要がある
# そのため、手動での発火は、workflow_dispatchを指定する必要がある
name: Build Sphinx Documentation(PDF)

# ビルド時に書き込みが必要なので権限を設定
permissions:
  contents: write

on:
  push:
    branches: [ main ]
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
    paths:
      - 'sources/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# 複数回actionsが動かないようにする
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:    
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: build PDF doc
        run: |
          # リリース情報を設定
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            # タグリファレンスから"refs/tags/"を除去して純粋なタグ名のみを使用
            RELEASE="${{ github.ref_name }}"
          else
            # ブランチ名を取得
            BRANCH_NAME="${{ github.ref_name }}"
            # コミットIDの先頭7桁を取得
            COMMIT_ID="${{ github.sha }}"
            SHORT_COMMIT="${COMMIT_ID:0:7}"
            RELEASE="${BRANCH_NAME}-${SHORT_COMMIT}"
          fi
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          
          # conf.pyのリリース情報を更新
          if [ -f sources/conf.py ]; then
            # releaseが存在する場合は更新、存在しない場合は追加
            if grep -q "^release\s*=" sources/conf.py; then
              sed -i "s/^release\s*=.*$/release = \"${RELEASE}\"/" sources/conf.py
            else
              # ファイル末尾に追加
              echo -e "\n# リリースバージョン\nrelease = \"${RELEASE}\"" >> sources/conf.py
            fi
          fi
          COMPOSE_FILES="-f compose.yml -f compose-pdfwf.yml"
          # コンテナをバックグラウンドで起動する
          docker compose $COMPOSE_FILES up -d
          # コンテナ内でソースコード一式を/tmp/appにコピーする
          docker compose $COMPOSE_FILES exec app rsync -av \
            --exclude='.git' \
            --exclude='.venv' \
            --exclude='node_modules' \
            /app/ /tmp/app/
          # コピー先でビルドを実行する
          docker compose $COMPOSE_FILES exec app make -C /tmp/app latexpdf
          # 成果物の受け取りを行う(PDF部分のみ)
          mkdir -pv build/latex
          docker compose $COMPOSE_FILES cp app:/tmp/app/build/latex/network2025.pdf ./build/latex/
          # コンテナを停止する
          docker compose $COMPOSE_FILES down --remove-orphans
      # - name: upload PDF as Artifact
      #   if: ${{ !env.ACT }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: doc-pdf
      #     path: build/latex/*.pdf
      # # リリース処理: 本ファイル冒頭のルールに従い、リリースバージョンを設定する
      # - name: Create Release
      #   id: create_release
      #   uses: softprops/action-gh-release@v2
      #   if: ${{ !env.ACT }} && github.event_name == 'push' || github.event_name == 'workflow_dispatch'
      #   with:
      #     tag_name: ${{ (github.ref_type == 'tag') && github.ref_name || 'latest' }}
      #     # release_name: ${{ (github.ref_type == 'tag') && github.ref || 'latest' }}
      #     files: build/latex/*.pdf
      #     draft: false
      #     prerelease: false
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
